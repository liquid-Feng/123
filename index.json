[{"categories":["网络"],"contents":"redis pipline 你给我延迟了40ms？ 前段时间实现了一个redis代理，在客户端使用pipline请求的时候出现了一个奇异的现象，假设客户端请求3条命令，第2条命令和剩下命令的数据响应总是要在第1条命令到了之后的40ms才到达，经过一系列苦逼的debug找问题后，原本服务端收到pipline 3条命令后会分别把3条命令去请求，都完成后会按顺序依次写入socket去回包，后来改成了组合起来一次写入，40ms的现象不见了，问题是解决了，但是原因是什么呢？带着疑问一顿找原因。\nNagle算法* Nagle算法的基本定义是任意时刻，最多只能有一个未被确认的小段。只允许一个未被ACK的包存在于网络，它并不管包的大小，因此它事实上就是一个扩展的停-等协议，只不过它是基于包停-等的，而不是基于字节停-等的。\ndelay ack机制* 延时发送ACK，在收到数据包的时候，会检查是否需要发送ACK，如果需要的话，进行快速ACK还是延时ACK，在无法使用快速确认的条件下，就会使用Delay Ack。\n1.当有响应数据发送的时候，ACK会随着数据一块发送。\n2.如果没有响应数据，ACK就会有一个延迟，以等待是否有响应数据一块发送，但是这个延迟一般在40ms~500ms之间，一般情况下在40ms左右，如果在40ms内有数据发送，那么ACK会随着数据一块发送，对于这个延迟的需要注意一下，这个延迟并不是指的是收到数据到发送ACK的时间延迟，而是内核会启动一个定时器，每隔200ms就会检查一次，比如定时器在0ms启动，200ms到期，180ms的时候data来到，那么200ms的时候没有响应数据，ACK仍然会被发送，这个时候延迟了20ms。\n造成40s延迟的原因 触发场景 一次tcp请求的数据， 不能在服务端产生一次响应。从而导致定时器触发超时也就是40ms..\n规避方案 只有同时客户端打开Nagel算法， 服务端打开tcp_delay_ack才会导致前面的死锁状态。 解决方案可以从TCP的两端来入手。\n服务端： 关闭tcp_delay_ack, 这样， 每个tcp请求包都会有一个ack及时响应， 不会出现延迟的情况。 操作方式： echo 1 \u0026gt; /proc/sys/net/ipv4/tcp_no_delay_ack 但是， 每个tcp请求都返回一个ack包， 导致网络包量的增加，关闭tcp延迟确认后， 网络包量大概增加了80%，在高峰期影响还是比较明显。 2.设置TCP_QUICKACK属性。 但是需要每次recv后再设置一次。 对应我们的场景不太适合，需要修改服务端redis源码。\n客户端： 关闭nagel算法，即设置socket tcp_no_delay属性。static void _set_tcp_nodelay(int fd) { int enable = 1; setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, (void*)\u0026amp;enable, sizeof(enable)); } 避免多次写， 再读取的场景， 合并成一个大包的写；避免一次请求分成多个包发送， 最开始发送的包小于一个MSS，对我们的场景， 把第22号包的1424个字节缓存起来， 大于一个MSS的时候，再发送出去， 服务端立即返回响应， 客户端继续发送后续的数据， 完成交互，避免时延。\n","permalink":"https://examplesite.com/net01-tcp40/","tags":null,"title":"TCP神奇的40ms"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n","permalink":"https://examplesite.com/author/john-doe/","tags":null,"title":"John Doe"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n","permalink":"https://examplesite.com/author/mark-dinn/","tags":null,"title":"Mark Dinn"}]